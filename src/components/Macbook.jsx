/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/macbookPro.glb -o src/components/Macbook.jsx -r publicclear 
*/
import { Decal, useGLTF, useTexture } from "@react-three/drei";
import React, { useState } from "react";
import { degToRad } from "three/src/math/MathUtils.js";
import { useControls } from "leva";

export function MacbookPro(props) {
  const textureImg = useTexture("/textures/doraemon.jpg");
  const { nodes, materials } = useGLTF("/models/macbookPro.glb");

  useControls({
    // angle: {
    //   min: degToRad(60),
    //   max: degToRad(300),
    //   value: Math.PI / 4,
    //   step: 0.01,
    //   onChange: (value) => {
    //     const x = Math.cos(value);
    //     const z = Math.sin(value);
    //     const rot = Math.atan2(x, z);
    //     setRotation(() => [0, rot, 0]);
    //     setPos((pos) => [x, pos[1], z]);
    //   },
    // },
    posY: {
      min: 0.4,
      max: 1.4,
      value: -0.7,
      step: 0.01,
      onChange: (value) => {
        setPos((pos) => [pos[0], value, pos[2]]);
      },
    },
    posX: {
      min: -1,
      max: 1,
      value: 0,
      step: 0.01,
      onChange: (value) => {
        setPos((pos) => [value, pos[1], pos[2]]);
      },
    },
    scale: {
      min: 0.5,
      max: 3,
      value: 1,
      step: 0.01,
      onChange: (value) => {
        setScale(() => [value, value, 1]);
      },
    },
  });

  const [pos, setPos] = useState([0, 0.8, -0.7]);
  const [rotation, setRotation] = useState([0, 0, 0]);
  const [scale, setScale] = useState([0.5, 0.5, 0.5]);

  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes.mesh485226736.geometry}
        material={materials.mat16}
      />
      <mesh
        geometry={nodes.mesh485226736_1.geometry}
        material={materials.mat23}
      />
      <mesh
        geometry={nodes.mesh485226736_2.geometry}
        material={materials.mat17}
      />
      <mesh
        geometry={nodes.mesh485226736_3.geometry}
        material={materials.mat15}
      />
      <mesh
        geometry={nodes.mesh256948792.geometry}
        material={materials.mat16}
      />
      <mesh
        geometry={nodes.mesh256948792_1.geometry}
        material={materials.mat23}
      />
      <mesh
        geometry={nodes.mesh256948792_2.geometry}
        material={materials.mat17}
      />
      <mesh
        geometry={nodes.mesh256948792_3.geometry}
        material={materials.mat25}
      />
      <mesh
        geometry={nodes.mesh256948792_4.geometry}
        // material={materials.texture}
      >
        <meshBasicMaterial transparent opacity={0} />
        <Decal
          debug // Makes "bounding box" of the decal visible
          position={pos} // Position of the decal
          rotation={rotation} // Rotation of the decal (can be a vector or a degree in radians)
          scale={scale} // Scale of the decal
        >
          <meshBasicMaterial
            map={textureImg}
            transparent
            toneMapped={false}
            polygonOffset
            polygonOffsetFactor={-1} // The mesh should take precedence over the original
          />
        </Decal>
      </mesh>
    </group>
  );
}

useGLTF.preload("/models/macbookPro.glb");
